# -*- coding: utf-8 -*-
"""ForestRegressor-Boston.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dyyjFKm0IYTuvDPT67Skfs4knZViY4VW
"""

#------------------------------------------------------------------------------
# Random Forest Classification Regressor
#------------------------------------------------------------------------------
import pandas as pd
import numpy as np

#------------------------------------------------------------------------------
#  Importar o conjunto de dados Boston em um dataframe do pandas
#------------------------------------------------------------------------------
dataset = pd.read_excel('../data/Boston.xlsx')

dataset = dataset.iloc[:,1:]

#dataset = dataset.loc[:,['LSTAT','INDUS','PTRATIO','RM','target']]

#Descrições das estatísticas
print(dataset.describe())

#------------------------------------------------------------------------------
#  Criar os arrays numéricos correspondentes aos atributos e ao alvo
#------------------------------------------------------------------------------
x = dataset.iloc[:,:-1].values
y = dataset.iloc[:,-1].values

#------------------------------------------------------------------------------
# Dividindo o conjunto de dados em: conjunto de treinamento e conjunto de teste
#------------------------------------------------------------------------------

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(
    x, y, 
    test_size = 0.25, 
    random_state = 0
    )
    # VER VALIDACAO CRUZADA e SVM

#------------------------------------------------------------------------------
# Ajustando o Random Forest Regressor ao grupo de treinamento
#------------------------------------------------------------------------------
from sklearn.ensemble import RandomForestRegressor
from sklearn import metrics


regressor = RandomForestRegressor(
                                      n_estimators = 50, 
                                      random_state = 0,
                                      bootstrap=True,
                                      ccp_alpha = 0,
                                      criterion = "mse",
                                      max_depth = 10,
                                      max_features = "auto",
                                      min_samples_leaf = 1,
                                      min_samples_split = 2,
                                      min_weight_fraction_leaf = 0,
                                      n_jobs = None,
                                      warm_start = False
                                  )

regressor.fit(X_train, y_train)

#------------------------------------------------------------------------------
# Predizendo os resultados do conjunto de testes
#------------------------------------------------------------------------------
y_pred = regressor.predict(X_test)

#------------------------------------------------------------------------------
# Resultados
#------------------------------------------------------------------------------

print('MAE:', metrics.mean_absolute_error(y_test, y_pred))  
print('MSE:', metrics.mean_squared_error(y_test, y_pred))  
print('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))


#------------------------------------------------------------------------------
# Ajustar a escala das variáveis de entrada
#------------------------------------------------------------------------------

from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()

scaler  = scaler.fit(X_train)

X_train = scaler.transform(X_train)
X_test  = scaler.transform(X_test)



#------------------------------------------------------------------------------
# Ajustando hiperparametros para o KNN
#------------------------------------------------------------------------------

from sklearn.neighbors import KNeighborsRegressor

print ( "%3s   %6s" % ("viz","RMSE") )
print ( "%3s   %6s" % ("---","----") )

for n_vizinhos in range(1,21):

    regressor = KNeighborsRegressor(
        n_neighbors = n_vizinhos,
        weights = 'distance',
        )
        
    regressor.fit(X_train, y_train)
    y_pred = regressor.predict(X_test)
    rmse = np.sqrt(metrics.mean_squared_error(y_test, y_pred))
            
    print ( "%3d   %6.3f" % (n_vizinhos,rmse) )

#------------------------------------------------------------------------------
# Verificando a correlacao entre as variaveis
#------------------------------------------------------------------------------
    
from scipy.stats import pearsonr
    
col1 = 'LSTAT'
col2 = 'ZN'

dataset.plot.scatter(x=col1,y=col2)
print ( "pearson(%7s,%7s)" % (col1,col2) , ") = %6.3f , %6.3e" % pearsonr(dataset[col1],dataset[col2]))

