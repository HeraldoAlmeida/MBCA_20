# -*- coding: utf-8 -*-
"""ForestRegressor-Boston.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dyyjFKm0IYTuvDPT67Skfs4knZViY4VW
"""

#------------------------------------------------------------------------------
# Random Forest Classification Regressor
#------------------------------------------------------------------------------
import pandas as pd
import numpy as np

#------------------------------------------------------------------------------
#  Importar o conjunto de dados Boston em um dataframe do pandas
#------------------------------------------------------------------------------
dataset = pd.read_excel('../data/Boston.xlsx')

dataset = dataset.iloc[:,1:]

#Descrições das estatísticas
print(dataset.describe())

#------------------------------------------------------------------------------
#  Criar os arrays numéricos correspondentes aos atributos e ao alvo
#------------------------------------------------------------------------------
x = dataset.iloc[:,:-1].values
y = dataset.iloc[:,-1].values

#------------------------------------------------------------------------------
# Dividindo o conjunto de dados em: conjunto de treinamento e conjunto de teste
#------------------------------------------------------------------------------

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(
    x, y, 
    test_size = 0.25, 
    random_state = 0
    )
    # VER VALIDACAO CRUZADA e SVM

#------------------------------------------------------------------------------
# Ajustando o Random Forest Regressor ao grupo de treinamento
#------------------------------------------------------------------------------
from sklearn.ensemble import RandomForestRegressor
from sklearn import metrics


regressor = RandomForestRegressor(
                                      n_estimators = 50, 
                                      random_state = 0,
                                      bootstrap=True,
                                      ccp_alpha = 0,
                                      criterion = "mse",
                                      max_depth = 10,
                                      max_features = "auto",
                                      min_samples_leaf = 1,
                                      min_samples_split = 2,
                                      min_weight_fraction_leaf = 0,
                                      n_jobs = None,
                                      warm_start = False
                                  )

regressor.fit(X_train, y_train)

#------------------------------------------------------------------------------
# Predizendo os resultados do conjunto de testes
#------------------------------------------------------------------------------
y_pred = regressor.predict(X_test)

#------------------------------------------------------------------------------
# Resultados
#------------------------------------------------------------------------------

print('MAE:', metrics.mean_absolute_error(y_test, y_pred))  
print('MSE:', metrics.mean_squared_error(y_test, y_pred))  
print('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))

#------------------------------------------------------------------------------
# Ajustando hiperparametros para o Random Forest
#------------------------------------------------------------------------------

print ( "%3s   %6s   %6s   %6s" % ("est","RMSE"," MIN"," MAX") )
print ( "%3s   %6s   %6s   %6s" % ("---","----","----","----") )

n_tiros = 5

for n_estimadores in range(10,201,10):

    min_rmse  = 1000000
    max_rmse  = 0
    
    soma_rmse = 0
    
    for tiro in range(n_tiros):
        
        regressor = RandomForestRegressor(
                                              n_estimators = n_estimadores, 
                                              random_state = None,
                                              bootstrap=True,
                                              criterion = "mse",
                                              max_depth = 10,
                                              max_features = "auto",
                                              min_samples_leaf = 1,
                                              min_samples_split = 2,
                                              min_weight_fraction_leaf = 0,
                                              ccp_alpha = 0,
                                              n_jobs = None,
                                              warm_start = False
                                          )
    
        regressor.fit(X_train, y_train)
        y_pred = regressor.predict(X_test)
        rmse = np.sqrt(metrics.mean_squared_error(y_test, y_pred))
        
        soma_rmse = soma_rmse + rmse        
        if rmse < min_rmse: min_rmse = rmse
        if rmse > max_rmse: max_rmse = rmse
        
        
        
    rmse_medio = soma_rmse / n_tiros
        
    print ( "%3d   %6.3f   %6.3f   %6.3f" % (n_estimadores,rmse_medio,min_rmse,max_rmse) )
        

